class LargeMine : Actor
{

  Default
  {
	  Health 60;
	  Radius 16;
	  Height 28;
	  Mass 1800;
	  Speed 0;
	  PainChance 255;
	  MinMissileChance 255;
	  Monster;
	  +FLOAT
	  +FLOATBOB
	  +NOGRAVITY
	  +NOBLOOD
	  Scale 0.5;
	  Gravity 0.2;
	  Obituary " ";
  }
  
  void MineExplodePieces()
  {
		vector3 npos = pos;
		npos.z += 25;
		let piece = Actor(ExtendedActor.Debris("Biomine_Piece1", npos, pitch, angle,180,45,45,5,2,2));
		if(piece) piece.vel.z = random(8,16);
		piece = Actor(ExtendedActor.Debris("Biomine_Piece2", npos, pitch, angle,180,45,45,5,2,2));
		if(piece) piece.vel.z = random(8,16);
		piece = Actor(ExtendedActor.Debris("Biomine_Piece3", npos, pitch, angle,90,45,45,5,6,2));
		if(piece) piece.vel.z = random(8,16);
  }

  States
  {
  Spawn:
    MINL A 2
	{
		if(CheckProximity("RadixShip",45)) return ResolveState("Death");
		return ResolveState(Null);
	}
    Loop;
  Pain:
	MINL A 1 Spawn("RobotSpark",pos);
  goto Spawn;
  Missile:
    Goto Spawn;
  XDeath:
  Death:
	TNT1 A 0 
	{
		MineExplodePieces();
		A_Explode(170,96);
		A_PlaySound("Radix/Explosion",0,1);
	}
	MINL A 3;
 	MINL AAAA random(1,3) 
	{
		A_Quake(1,8,0,420,"");
		vector3 npos = pos;
		npos.z += 25;
		if(random(1,2)==1)A_PlaySound("Radix/Explosion",0,1);
		let ex = Actor(ExtendedActor.Debris("RadixMissileExplosion", npos, pitch, angle,180,24,18,16,2,2));
		if(ex) ex.A_SetScale(frandom(0.3,1.0));
		ex = Actor(ExtendedActor.Debris("RadixMissileExplosion", npos, pitch, angle,180,8,24,36,2,2));
		if(ex) ex.A_SetScale(frandom(0.25,1.0));
		ex = ExtendedActor.Debris("RadixFlyingExplosion", npos, pitch, angle,180,48,48,8,8,12);
		if(ex) ex.vel.z = 10;
	}
	DeathFinal:
		MINL A 1;
    Stop;
  }
}
class LargeMine_Horz : LargeMine
{
  int dir;
  float xspd;
  bool axis;
  Property DefDir : dir;
  Property XSpeed : xspd; 
  Property NotX : axis;
  Default
  {
	  -FLOATBOB
	  LargeMine_Horz.DefDir 1;
	  LargeMine_Horz.XSpeed 4;
	  LargeMine_Horz.NotX false;
  }
  bool TryMoveDir(float amt)
  {
	  State nil;
	  bool wcheck;
	  [nil, wcheck] = A_Warp(AAPTR_TRACER, axis ? amt*dir : 0, !axis ? amt*dir : 0);
	  return wcheck;
  }
  override bool CanCollideWith(Actor other, bool passive) 
  {
	  if( LargeMine_Horz(other) )
	  {
		  let mine = LargeMine_Horz(other);
		  dir *= -1;
		  mine.dir *= -1;
	  }
	  else
	  {
		  dir *= -1; 
	  }
	  return super.CanCollideWith(other,passive); 
  }
  
  override void Tick()
  {
	  tracer = self;
	  if(!TryMoveDir(xspd)) dir *= -1;
	  super.tick();
  }
  
  States
  {
	Spawn:
		MINL A 2
		{
			if(CheckProximity("RadixShip",45)) return ResolveState("Death");
			vector3 npos = pos;
			if( axis) npos.x += xspd*dir;
			if(!axis) npos.y += xspd*dir;
			SetOrigin(npos,true);
			return ResolveState(Null);
		}
	loop;
  }
}
class LargeMine_HorzY : LargeMine_Horz
{
	Default
	{
		LargeMine_Horz.XSpeed -4;
		LargeMine_Horz.NotX true;
	}
}