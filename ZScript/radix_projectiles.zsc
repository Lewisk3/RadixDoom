
// Ship collision checker

class ShipCollider : FastProjectile
{
	Default
	{
		Projectile;
		Speed 12;
		Radius 32;
		Height 24;
		RenderStyle "Add";
		Alpha 0.6;
		Scale 0.5;
	}
	States
	{
		Spawn:
			TNT1 A 2;
		stop;
		Death:
			TNT1 A 0 A_Explode(1,30);
			EXP2 ABCDE 4;
		DeathFade:
			EXP2 E 2 A_FadeOut(0.02);
		wait;
	}
}



// Neutron Cannon

class NeutronBall : Actor
{
	Default
	{
	  Radius 13;
	  Height 8;
	  Speed 42;
	  Damage 5;
	  Scale 0.5;
	  +BLOODSPLATTER
	  Projectile;
	  +RANDOMIZE;
	  DeathSound "NeutronBall/impact";
	  //Obituary " %o was lol, idk by %k";
	 }
	  States
	  {
	  Spawn:
		NEUT A 2 Bright;
		Loop;
	  Death:
		PLSM DE 2 Bright;
		NEUT B 4 Bright;
		Stop;
	  }
}

// Plasma spreader

class WanderingPlasma : Actor
{
	int bobdir;
	float bobx, bobmax, bobspd, bobstr;
	
	Property FPath : bobspd, bobmax, bobstr, bobdir;
	
	  Default
	  {
		  Radius 8;
		  Height 8;
		  Speed 12;
		  Damage 16;
		  Scale 0.5;
		  Projectile;
		  +BLOODSPLATTER
		  +RANDOMIZE;
		  Alpha 0.75;
		  WanderingPlasma.FPath 18, 160, 14, 1;
		  BounceType "Grenade";
		  BounceCount 5;
		  +USEBOUNCESTATE;
	  }
	  
	  override void tick()
	  {
		  if(bouncecount > 0)
		  {
			  vector3 npos = (pos.x,pos.y,pos.z);
			  npos.x += (cos(angle+bobx)*bobstr)*bobdir;
			  npos.y += (sin(angle+bobx)*bobstr)*bobdir;
			  
			  bobx += bobspd*bobdir;
			  
			  if( abs(bobx) > bobmax )
			  {
				  bobx = 0;
				  bobdir *= -1;
			  }
			  
			   SetOrigin(npos,true);
			   //setXYZ(npos); Set origin is safer to use here.
		   }
		   super.tick();
	  }
	  
	  
	  States
	  {
		  Spawn:
			PLSM AB 4 Bright;
			Loop;
		  Death:
			PLSM ABCDEF 4 Bright;
			Stop;
		  Bounce:
			PLSM A 1
			{
				if(bouncecount <= 0 || frandom(0,1) < 0.8) return ResolveState("Death");
				return ResolveState(Null);
			}
		   goto Spawn;
	  }
}

// Explosive Cannon

class RadixBullet : FastProjectile
{
	int range;
	int lifetime;
	
	Property MaxRange : range;
	
	Default
	{
	  Speed 600;
	  Damage 0;
	  Projectile;
	  +BLOODSPLATTER
	  +RANDOMIZE;
	  RadixBullet.MaxRange -1;
	}
	
	override void tick()
	{
		lifetime++;
		if(lifetime > range) Die(self,self);
		super.tick();
	}
	
}

class ExplosiveBullet : RadixBullet
{
	Default
	{
	  Radius 13;
	  Height 8;
	  Damage 5;
	  Scale 0.5;
	  RadixBullet.MaxRange 2;
	 }
	 
	 States
	 {
		Spawn:
			TNT1 A 1;
		loop;
		Death:
			TNT1 A 1 { if(lifetime <= range) Spawn("ExplosivePuff",pos); }
		stop;
	 }
}

class ExplosivePuff : Actor
{
  Default
  {
	  +NOBLOCKMAP;
	  +NOGRAVITY;
	  +ALLOWPARTICLES;
	  +RANDOMIZE;
	  Scale 0.35;
	  Mass 5;
  }
  States
  {
	  Spawn:
		EXPP AB 4 Bright A_Explode(24,10,0,false,0,0,10,null,"RadixExplosivePuff");
	  Melee:
		EXPP C 4;
		Stop;
  }
}


// Missiles
class RadixMissile : Actor
{

	Default
	{
		Radius 8;
		Height 4;
		Speed 22;
		Projectile;
		+NOGRAVITY;
		Damage 30;
		+BLOODSPLATTER
	}
	
	Actor RadixExplode(int xsp=30, int ysp=8, int zsp=8)
	{		
		vector3 npos = pos;
		npos.x += cos(angle+90)*frandom(-xsp,xsp);
		npos.y += sin(angle+90)*frandom(-ysp,ysp);
		npos.z += frandom(-zsp,zsp);
		let exp = Actor(Spawn("RadixMissileExplosion",npos));
		if(exp)exp.A_SetScale(frandom(0.15,0.8));
		return exp;
	}
	
	States
	{
		Spawn:
			TNT1 A 1; // 1 tic needed for angle correction.
		SpawnLoop:
			MISL A 1 
			{
				if(tracer)
				{
					 A_SeekerMissile(20,20,SMF_CURSPEED,500*32);
				}
			}
			TNT1 A 0 { Spawn("RadixMissileTrail",pos); }
		loop;
		
		Death:
			MISL A 1 
			{
				A_Explode(60,100,0,false,0,0,10,null,"RadixExplosivePuff");
				let a = RadixExplode();
				// Spawn some random explosions.
				A_Quake(2,12,0,800);
				A_PlaySound("Radix/Explosion",0,1);
			}
			TNT1 A 3;
			TNT1 A 0 RadixExplode();
			TNT1 A 7 { A_SetTics(random(3,8)); }
			TNT1 A 0 RadixExplode();
			TNT1 A 6 { A_SetTics(random(2,8)); }
			TNT1 A 0 RadixExplode();
			TNT1 A 2 { A_SetTics(random(2,8)); }
			TNT1 A 0 RadixExplode();
			TNT1 A 16;
		stop;
	}
}
class RadixMissileTrail : Actor
{
	Default
	{
		+NOGRAVITY;
		-SOLID;
		+NOBLOCKMAP;
		RenderStyle "Add";
		Alpha 1.0;
	}
	
	States
	{
		Spawn:
			EXPP AB 8;
		FadeLoop:
			EXPP C 2 A_FadeOut(0.08);
		wait;
		Death:
			EXPP C 2 A_FadeOut(0.08);
		stop;
	}
}

// Nuke
class RadixNuke : RadixMissile
{

	Default
	{
		Speed 22;
		Projectile;
		+NOGRAVITY;
		Damage 100;
		+BLOODSPLATTER
	}
	
	void NukeSplosions()
	{
		A_PlaySound("Radix/Explosion",0,1);
		for(int i = 0; i < random(5,15); i++)
		{
			ExtendedActor.Debris("RadixMissileExplosion",pos,pitch,angle+90,180,200,160,160);
			ExtendedActor.Debris("RadixFlyingExplosion",pos,pitch,angle+90,180,120,80,160,18,5);
			int angle = angle+random(-180,180);
			int xo = -(cos(angle+90)*frandom(-40,-40));
			int yo = sin(angle+90)*frandom(-60,60);
			vector3 npos = pos;
			npos.x += xo;
			npos.y += yo;
			Spawn("RadixMissileSmoke",npos);
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 1; // 1 tic needed for angle correction.
		SpawnLoop:
			NMSL A 1 
			{ 
				Spawn("RadixSmokeTrail",pos); 
				if(tracer)
				{
					 A_SeekerMissile(20,20,SMF_CURSPEED,500*32);
				}
			}
		loop;
		
		Death:
			NMSL A 1 
			{
				A_Explode(2000,400,0,false,0,0,10,null,"RadixExplosivePuff");
				NukeSplosions();
				// Spawn some random explosions.
				A_Quake(3,36,0,1600);
				A_PlaySound("Radix/Explosion",0,1);
			}
			NMSL A 3;
			NMSL A 0 NukeSplosions();
			NMSL A random(3,8);
			NMSL A 0 NukeSplosions();
			NMSL A random(3,8);
			NMSL A 0 NukeSplosions();
			NMSL A 18;
		stop;
	}
}
class RadixSmokeTrail : RadixMissileTrail
{
	Default
	{
		Scale 0.45;
	}

	States
	{
		Spawn:
			SMTR AB 14;
		FadeLoop:
			SMTR C 4 A_FadeOut(0.08);
		wait;
		Death:
			SMTR C 4 A_FadeOut(0.08);
		stop;
	}
}
class RadixSmokeTrail_Fast : RadixSmokeTrail
{
	States
	{
		Spawn:
			SMTR AB 6;
		FadeLoop:
			SMTR C 2 A_FadeOut(0.12);
		wait;
		Death:
			SMTR C 2 A_FadeOut(0.12);
		stop;
	}
}

// Missile effects
class RadixMissileExplosion : Actor
{
	Default
	{
		+NOGRAVITY;
		-SOLID;
		+NOBLOCKMAP;
		VSpeed 2;
		SeeSound "Radix/Explosion"; // Doesn't work for absolutely no reason at all, how great.
	}
	States
	{
		Spawn:
			EXPL ABCDE 2;
		Death:
			TNT1 A 1 { Spawn("RadixMissileSmoke",pos); }
			EXPL FGHIJ 2;
		stop;
	}
}
class RadixMissileSmoke : RadixMissileExplosion
{
	Default
	{
		VSpeed 5;
		Speed 2;
		RenderStyle "Add";
		Alpha 0.6;
	}
	States
	{
		Spawn:
			SMOK ABCDEFGHIJ 3;
		FadeLoop:
			SMOK J 1 A_FadeOut(0.04);
		wait;
		Death:
			SMOK J 1 A_FadeOut(0.04);
		wait;
	}
}
class RadixFlyingExplosion : RadixMissileExplosion
{
	Default
	{
		-NOGRAVITY;
		Scale 0.2;
	}
	
	States
	{
		Spawn:
			EXPL ABCDE 2 { Spawn("RadixSmokeTrail",pos); }
		Death:
			EXPL FGHIJ 2;
		stop;
	}
}

//Gravity wave

class GravityWave_Damager : FastProjectile
{
	Default
	{
		Speed 22;
		Projectile;
		+NOGRAVITY;
		+BLOODSPLATTER
	}
	
	States
	{
		Spawn:
			GRVP AAAAAA 1 { if(target)ExtendedMaths.DistanceDamage(self,80,500,target.target); } 
		Death:
			GRVP A 1;
		stop;
	}
	
}

class GravityWaveProj : Actor
{
	Default
	{
		Speed 22;
		Projectile;
		+NOGRAVITY;
		Damage 80;
		+BLOODSPLATTER
	}
	
	void GravityExplosions()
	{
		for(int i = 0; i < random(5,15); i++)
		{
			ExtendedActor.Debris("GravityPuff",pos,pitch,angle,180,300,280);
			ExtendedActor.Debris("RadixFlyingExplosion",pos,pitch,angle,180,220,160,80,18,ceil(6*.7));
			Actor expl;
			expl = ExtendedActor.Debris("RadixMissileExplosion",pos,pitch,angle,180,220,160,80,6,ceil(6*.2));
			if(expl) expl.A_SetScale(frandom(0.15,0.30));
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		SpawnLoop:
			GRAV AAAABBBBCCCC 1 
			{
				if(target)
				{
					A_PlaySound("Radix/GravityWave",CHAN_BODY,1,true);
					ExtendedMaths.DistanceDamage(self,130,150,target);
					let dmgleft = GravityWave_Damager(Spawn("GravityWave_Damager",pos));
					let dmgright = GravityWave_Damager(Spawn("GravityWave_Damager",pos));
					if(dmgleft)
					{
						dmgleft.target = self;
						dmgleft.angle = angle;
						dmgleft.vel = (cos(angle)*500, sin(angle)*500, -sin(pitch)*250);
					}
					if(dmgright)
					{
						dmgright.target = self;
						dmgright.angle = angle+180;
						dmgright.vel = (cos(angle+180)*500, sin(angle+180)*500, -sin(pitch)*250);
					}
				}
			}
		loop;
		
		Death:
			GRAV A 1 
			{
				A_Explode(300,100,0,false,0,0,10,null,"RadixExplosivePuff");
				GravityExplosions();
				// Spawn some random explosions.
				A_Quake(3,36,0,1600);
				A_StopSound(CHAN_BODY);
				A_PlaySound("Radix/Explosion",0,1);
			}
			TNT1 A 3;
			TNT1 A 0 GravityExplosions();
			TNT1 A random(3,8);
			TNT1 A 0 GravityExplosions();
			TNT1 A random(2,8);
			TNT1 A 0 GravityExplosions();
			TNT1 A 18;
		stop;
	}
}

class GravityPuff : Actor
{
	Default
	{
		+NOGRAVITY;
		-SOLID;
		+NOBLOCKMAP;
	}
	
	States
	{
		Spawn:
			GRVP AB 4;
		FadeLoop:
			GRVP C 2 A_FadeOut(0.08);
		wait;
		Death:
			GRVP C 2 A_FadeOut(0.08);
		stop;
	}
}



// Phase Torpedos
class RadixTorpedo : Actor
{	
	double movex;
	double movez;
	
	Actor box;
	PhaseTorpedos shooter;

	Default
	{
		Radius 4;
		height 4;
		Speed 22;
		Projectile;
		+NOGRAVITY;
		Damage 15;
		+BLOODSPLATTER
	}
	
	void TorpMove()
	{
		vector3 npos = pos;
		npos.x += cos(angle-90)*movex;
		npos.y += sin(angle-90)*movex;
		npos.z += movez;
		setXYZ(npos);
	}
	
	Actor CreateTorpedo(double mx, double my, Actor targ, Actor box)
	{
		let torp = RadixTorpedoSingle(Spawn("RadixTorpedoSingle",pos));
		if(torp)
		{	
			torp.movex = mx;
			torp.movez = my;
			torp.vel = vel;
			torp.angle = angle;
			torp.tracer = targ;
			torp.target = target;
			torp.box = box;
			return torp;
		}
		return null;
	}
	
	void Explosion()
	{
		A_PlaySound("Radix/Explosion",0,1);
		let ex = Actor(Spawn("RadixMissileExplosion",pos));
		if(ex) ex.A_SetScale(frandom(0.1,0.75));
	}
	
	States
	{
		Spawn:
			PTRP ABC 2 { movez = 2; }
		goto Split;
		SpawnLoop:
			PTRP AAAABBBBCCCC 1
			{
				A_SeekerMissile(20,20,SMF_CURSPEED,500*32);
				TorpMove();
			}
		loop;
		
		Split:
			TNT1 A 0;
			PTRP A 1
			{
				if(shooter)
				{
					// Pick 2 new unique targets for child torpedos.
					// If pick failed use default.
					
					Actor ntarget;
					Actor nbox;
					[ntarget, nbox] = shooter.PickGetTarget(1);
					if(ntarget==null) ntarget = tracer;
					Actor tone = CreateTorpedo(-2.4,0,ntarget,nbox);
					[ntarget, nbox] = shooter.PickGetTarget(2);
					if(ntarget==null) ntarget = tracer;
					Actor ttwo = CreateTorpedo(2.4,0,ntarget,nbox);
				}
			}
		goto SpawnLoop;
		
		Death:
			PTRP A 1 
			{
				if(box) box.Die(box, self);
				
				A_Explode(60,50,0,false,0,0,10,null,"RadixExplosivePuff");
				Explosion();
				A_Quake(2,4,0,400);
			}
			TNT1 A 3;
			TNT1 A 0 Explosion();
			TNT1 A random(2,8);
			TNT1 A 0 Explosion();
			TNT1 A 16;
		stop;
	}
}
class RadixTorpedoSingle : RadixTorpedo
{
	States
	{
		Spawn:
			PTRP AAAABBBBCCCC 1
			{
				A_SeekerMissile(20,20,SMF_CURSPEED,500*32);
				TorpMove();
			}
		loop;
	}
}


// Targetting
class TargetBox : Actor
{
	Default
	{
		Radius 8;
		Height 16;
		+NOBLOCKMAP;
		+NOBLOCKMAP;
		-SOLID;
		Scale 1.0;
	}
	
	// Tracer - Enemy target.
	// Master - Player.
	
	override void PostBeginPlay()
	{
		// Adjust to tracer's width/height.
		double rwidth  = tracer.radius/radius;
		double rheight = tracer.height/height;
		A_SetScale(rwidth, rheight);
		super.PostBeginPlay();
	}
	
	State FollowTracer()
	{
		if(tracer && tracer.health > 0) 
		{
			A_Warp(AAPTR_TRACER, 2, 0, 0, tracer.AngleTo(master), WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEANGLE);
			return ResolveState(Null);
		}
		return ResolveState("Death");
	}
	
	States
	{
		Spawn:
			TNT1 A 1 FollowTracer(); // Fixes some visual bugs.
		SpawnLoop:
			TARG A 1 FollowTracer();
		loop;
		
		Death:
			TNT1 A 1;
		stop;
	}
}