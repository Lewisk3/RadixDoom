
class EmptyShip : DoomPlayer
{
	Default
	{
		Speed 0;
		Health 200;
		Player.MaxHealth 200;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Player.ViewHeight 16;
		Player.StartItem "";
		Player.JumpZ 0;
		Player.ViewBob 0;
		Player.SoundClass "RadixPlayer";
		//Gravity 0
	}
	
	override bool CanCrouch() const { return false; } // Disable crouch.
	
	States
	{
		Spawn:
			RADX A -1;
			Loop;
		See:
			RADX A 4;
			Loop;
		Melee:
		Missile:
			RADX A 4 Bright;
			Goto Spawn;
		Pain:
			RADX A 4;
			RADX A 4 A_Pain;
			Goto Spawn;
		AltSkinXDeath:
		AltSkinDeath:
		XDeath1:
		XDeath:
		Death1:
		Death:
			Stop;
	}
	
}

struct HUDVars
{
	string TextMsg;
}

class RadixShip : EmptyShip
{

	// Because ZScript has a mental breakdown if i try to change a string without it being in a struct from not the play context.
	HUDVars hVars;

	// Bools
	bool groundship;
	bool backingup;
	bool boosting;
	bool powerup;
	bool ambientplaying; // Used for sound stuff.
	bool hastarget;
	bool lowarmorplaying; // Used for lowarmor beep.
	
	// Floats
	float dspd, dfriction, throttle, cruise, throttle_boost;
	float rpitch_min, rpitch_max;
	float lockspd, locktimer;
	float energy, maxenergy, energyregen;
	float shields, maxShields, shieldregen;
	float bobdir, bobmaxz, bobspd, bobcount;
	float defviewheight;
	float timer;
	float shield_damagemod; // How much more damage the shield can absorb.
	float rolloffs; // Kewl effects

	//Ints
	int currentWeaponID;
	int start_angle;
	int bombcooldown;
	
	// Names
	Name weapGraphic;
	
	// Actors
	Actor locked_target;
	Actor threat;
	RadixWeapon currentWeapon;

	property Move : dspd, dfriction;
	property CPitch : rpitch_min, rpitch_max;
	property LockOnSpeed : lockspd;
	property SetupEnergy : maxenergy, energyregen;
	property SetupShields : shields, maxShields, shieldregen;
	property IdleBob      : bobspd, bobmaxz;
	property ShipHasLegs : groundship;

	Default
	{
		DamageFactor "RadixExplosivePuff", 0;
		Mass 100;
		RadixShip.Move .65, 1.5;
		RadixShip.LockOnSpeed 0.08;
		RadixShip.CPitch -50, 50;
		RadixShip.SetupEnergy 100, 0.01;
		RadixShip.SetupShields 500, 500, 0.05;
		RadixShip.IdleBob 0.26, 8;
		RadixShip.ShipHasLegs false;
		Player.StartItem "NeutronCannons";
	}
	
	// I seriously hate the way armor is setup in Doom, it's easier just to do this for the shields.
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(mod == "RadixExplosivePuff") return 0;
		if(shields >= damage*shield_damagemod) 
		{
			shields -= damage*shield_damagemod;
		}
		else
		{
			// Allow remaining shield to slighly dampen the damage.
			int dmod = (damage*shield_damagemod)-shields;
			if(shields > 0) shields = 0;
			A_Quake(4,6,0,1,""); // Radix has this so, here it is.
			return super.DamageMobj(inflictor,source,dmod,mod,flags,angle);
		}
		return 0;
	}
	
	clearscope bool isMoving()
	{
		let btns = player.cmd.buttons;
		return btns & BT_FORWARD || btns & BT_BACK || btns & BT_MOVELEFT || btns & BT_MOVERIGHT || btns & BT_JUMP || btns & BT_CROUCH || boosting;
	}
	
	void SetHUDText(String txt)
	{
		hVars.TextMsg = txt;
	}
	
	clearscope void ClearHUDText() { hVars.TextMsg = ""; }
	
	void BobZ()
	{
		vector3 npos = (pos.x, pos.y, pos.z);
		npos.z += bobspd*bobdir;
		bobcount += bobspd;
		if( bobcount > bobmaxz ){ bobdir *= -1; bobcount = 0; }
		
		setXYZ(npos);
	}
	

	void update_target()
	{
		// Check for enemy undercrosshair, commence lock on.
		FTranslatedLineTarget lt;
		AimLineAttack(angle, 64*32, lt);
		if(lt.linetarget)
		{
			if(locked_target != Actor(lt.linetarget)) locktimer = 0;
			locked_target = Actor(lt.linetarget);
			// A cheap way of doing the lock on crosshair, cap at .7 as there are 7 total crosshairs.
			locktimer = clamp(locktimer + lockspd, 0, 0.7);
		}
		else
		{
			locktimer = clamp(locktimer-lockspd,0,0.7);
		}
		
		// Is target fully locked?
		hastarget = (locktimer >= .6);
		
		if(!locked_target || !IsVisible(locked_target, false))
		{
			locktimer = 0;
		}
	}
	
	void PitchThrust(float poff=0,float maxspd=5)
	{
		vel.z -= sin(pitch+poff)*dfriction;
		vel.z = clamp(vel.z, -maxspd*15, maxspd*15);
	}
	
	RadixWeapon GetInitialWeapon(String weap, RadixWeapon notw=null)
	{
		for(let w = Inv; w != null; w = w.Inv)
		{
			if(!RadixWeapon(w)) continue; // Skip if not a weapon.
			if( (w is weap) && (RadixWeapon(w) != notw || notw == null) ) 
			{
				// If we found a weapon of weap type and it's unique to notw.
				return RadixWeapon(w);
			}
		}
		return null;
	}
	
	
	override void MovePlayer ()
	{
		if(CheckVoodoo() || groundship) 
		{
			super.MovePlayer(); 
			return;
		}
				
		// Custom simplified move code.
		UserCmd cmd = player.cmd;

		angle += cmd.yaw * (360./65536.);
		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);
		if (cmd.forwardmove | cmd.sidemove)
		{
			double movetics = (Speed / 256.) * (.05 * (35 / TICRATE));
			vector2 movedir = (cmd.forwardmove, cmd.sidemove) * movetics;
			if(movedir.x)ForwardThrust(movedir.x, angle);
			if(movedir.y)Thrust(movedir.y, angle-90);
			
			if (!(player.cheats & CF_PREDICTING) && (movedir.x+movedir.y != 0))
				PlayRunning();
		}
	}		
	
	void update_movement()
	{
		if(groundship) 
		{	
			A_SetSpeed(1.0);
			return;
		}
	
		uint btns = player.cmd.buttons;
		
		energy = clamp(energy,0,maxenergy);
		
		rolloffs = clamp(rolloffs,-8,8);
		
		bool strafing = (btns & BT_MOVELEFT || btns & BT_MOVERIGHT);
		
		if(btns & BT_FORWARD) 
		{
			backingup = false; 
			throttle += .1;
			PitchThrust(0,speed);
			speed = dspd*throttle;
		}
		if(btns & BT_BACK) 
		{ 
			backingup = true;
			throttle += .1;
			PitchThrust(180,speed);
			speed = dspd*throttle;
		} else { backingup = false; } 
		
		if(strafing) speed = dspd;
		
		if( btns & BT_JUMP      ) PitchThrust(-90,10);
		if( btns & BT_CROUCH    ) PitchThrust(90,10);
		if( btns & BT_USER1     ) cruise += .1;
		if( btns & BT_USER2     ) cruise -= .1;
		boosting = (btns & BT_USER3);
		cruise = clamp(cruise,0,0.8+throttle_boost);
		
		pitch = clamp(pitch, rpitch_min, rpitch_max);
		throttle = clamp(throttle, 0, backingup ? 0.4+throttle_boost : 0.8+throttle_boost);
			
		// Strafe roll as suggested by "Jekyll Grim Payne"
		bool useRoll = CVar.GetCVar("radix_rollmove",player).getBool();
		if(btns & BT_MOVELEFT && useRoll) rolloffs -= 1;
		if(btns & BT_MOVERIGHT && useRoll) rolloffs += 1;
		if(!strafing || !useRoll) rolloffs *= 0.93;
		if(abs(rolloffs) < 0.2) rolloffs = 0;
		if( rolloffs != 0 ) A_SetRoll(rolloffs);
		

		
		if( !isMoving() ) 
		{
			vel *= 0.88;
			if(throttle > 0) throttle -= .3;
			if(health > 0) BobZ(); // Bob up and down when idle.
		}
		else
		{
			bobcount = 0;
		}
		
		if(boosting) 
		{
			// Only use energy if we don't have manueverjets.
			if(!countinv("Power_Jets"))
			{
				if(energy < 0.08) 
					boosting = false; 
				else
					energy -= 0.08;
			}
		}
		
		vel *= 0.95; // Apply Natural friction.
		
		// Cruise 
		if(cruise > 0)
		{
			float cruisemod = (cruise*10.0) + throttle_boost;
			float xmove = cos(angle)*(dspd*cruisemod);
			float ymove = sin(angle)*(dspd*cruisemod);
			if( !IsMoving() )
			{	
				vel.x += xmove*0.5;
				vel.y += ymove*0.5;
			}
		}
		
		// Boost
		if(boosting)
		{
			float xmove = cos(angle)*(dspd*(2.0 + throttle_boost));
			float ymove = sin(angle)*(dspd*(2.0 + throttle_boost));
			vel.x += xmove;
			vel.y += ymove;
		}
	
		// Sound ambients.
		
		if(health <= (maxhealth*0.25) && !lowarmorplaying)
		{
			bool doAlarm = CVar.GetCVar("radix_armoralarm",player).getBool();
			A_PlaySound("RadixShip/LowArmor",CHAN_5,1,true);
			lowarmorplaying = true;
		}
		if(health > (maxhealth*0.25) && lowarmorplaying) 
		{
			lowarmorplaying = false;
			A_StopSound(CHAN_5);
		}
		
		if( !Threat )
		{
			if(boosting && ambientplaying) 
			{
				A_PlaySound("RadixShip/Boost",CHAN_BODY,1,true);
				ambientplaying = false;
			}
			else if(!boosting && !ambientplaying)
			{
				A_PlaySound("RadixShip/EngineSpur",CHAN_BODY,1,true);
				ambientplaying = true;
			}
		}
		
	}
	
	void update_weapons()
	{	
		// Cycle through inventory, removing any non-radix weapons.
		for( let w = Inv; w != null; w = w.Inv )
		{
			let weap = RadixWeapon(w);
			if(!weap && Weapon(w)) 
			{
				RemoveInventory(w);
				continue;
			}
			if(player.ReadyWeapon == w)
			{
				weapGraphic = weap.selectGraphic;
				currentWeapon = weap;		
				currentWeaponID = weap.SlotNumber;
			}
		}
	}
	
	bool CheckVoodoo()
	{
		return (!player || !player.mo || player.mo != self);
	}
	
	void dopowerup()
	{
		if(timer == 0)
		{
			A_PlaySound("RadixShip/NotRadix/Powerup",CHAN_BODY);		
			timer = level.maptime;
		}
		else if(level.maptime - timer > 35*3)
		{
			powerup = false;
		}
	}
	
	
	void CheckThreat()
	{
		if(Threat)
		{
			if(Distance3D(threat) > 500) 
			{
				Threat = null;
				if(boosting) ambientplaying = true;
			}
		}
		ThinkerIterator it = ThinkerIterator.Create();
		Actor act;
		if(!Threat)
		{
			while(act = Actor(it.Next()))
			{
				// Missile threat if homing missile or rocket is near.
				if(Distance3D(act) > 500) continue;
				if(act.bSEEKERMISSILE == true && act.tracer != self) continue;
				if(act.bSEEKERMISSILE == true || act is "Rocket")
				{
					if(act is "Rocket" && act.vel.length() <= 0) return; 
					Threat = act;
					if(act.bSEEKERMISSILE) SetHudText("Watch out for seeker missiles!");
					bool doAlarm = CVar.GetCVar("radix_threatalarm",player).getBool();
					if(doAlarm)A_PlaySound("RadixShip/Threat",CHAN_BODY,1,true);
					ambientplaying = false; // Resume ship engine when done.
				}
			}
		}
	}
	
	override void tick()
	{	
		// Check if voodoo.
		if( CheckVoodoo() ) 
		{	
			super.tick();
			return;
		}
		
		if(groundship)
		{
			ViewBob = 1.0;
			ViewHeight = 41;
			defviewheight = 41;
		}
		
		shield_damagemod = 1; // Default damage.
		
		update_target();
		if(powerup) 
		{
			dopowerup();
			angle = start_angle;
			pitch = 0;
		}
		
		if(health <= 0) 
		{
			vel *= 0.8;
			bNOGRAVITY = false;
		}
		else if(!groundship)
		{
			// If Gravity 0 is given as a default, walkover linedefs will NOT trigger.
			bNoGravity = true; 
		}
		
		if(!powerup && health > 0)update_movement();
		update_weapons();	
		CheckThreat();
		
		if(health <= 0) 
		{
			bobmaxz = 0; // Stop bobbing.
			A_StopSound(CHAN_BODY);
			A_StopSound(CHAN_5); // Health low beep.
		}
		
		// Regenerate resources
		energy = clamp(energy+energyregen, 0, maxenergy);
		shields = clamp(shields + shieldregen, 0, maxShields);
		
		// Check to use plasma bomb
		if( countinv("btn_useplasma") )
		{
			TakeInventory("btn_useplasma",999);
			if(bombcooldown <= 0 && countinv("RadixBombs"))
			{
				GiveInventory("Effect_PBombFlash",1);
				// BFG style attack
				FireTracers(80,80,90,64*64,128,0);
				A_PlaySound("Radix/PlasmaBomb",CHAN_WEAPON);
				TakeInventory("RadixBombs",1);
				bombcooldown = 35; // 1 sec cooldown.
			}
		}
		if(bombcooldown > 0) bombcooldown --;
		
		super.Tick();
		if(height != 28 && !groundship) A_SetSize(16,28);
	}
	
	override void PostBeginPlay()
	{
		start_angle = angle;
		powerup=false;
		bobdir = 1;
		defviewheight = viewheight;
		energy = maxenergy;
		super.postBeginPlay();
	}
	
	// Custom tracer damage function.
	
	void FireTracers(int numrays = 40, int damagecnt = 15, double ang = 90, double distance = 16*64, double vrange = 32, int defdamage = 0)
	{
		int damage;
		FTranslatedLineTarget t;

		// offset angles from its attack ang
		for (int i = 0; i < numrays; i++)
		{
			double an = angle - ang / 2 + ang / numrays*i;

			AimLineAttack(an, distance, t, vrange);

			if (t.linetarget != null)
			{
				int dmgFlags = 0;
				Name dmgType = 'BFGSplash';

				if (defdamage == 0)
				{
					damage = 0;
					for (int j = 0; j < damagecnt; ++j)
						damage += Random[BFGSpray](1, 8);
				}
				else
				{
					// if this is used, damagecnt will be ignored
					damage = defdamage;
				}
				int newdam = t.linetarget.DamageMobj(self, target, damage, dmgType, dmgFlags|DMG_USEANGLE, t.angleFromSource);
				t.TraceBleed(newdam > 0 ? newdam : damage, self);
			}
		}
	}	
}